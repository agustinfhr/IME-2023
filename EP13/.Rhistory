dif_Tecnico_Profesional <- distribucion_diferencias(datos_anchos, "Tecnico", "Profesional", n)
# Obtener valores p.
# Muestra los valores p
cat("Valor p de la diferencia entre Media y Tecnico: ", dif_Media_Tecnico, "\n")
cat("Valor p de la diferencia entre Media y Profesional: ", dif_Media_Profesional, "\n")
cat("Valor p de la diferencia entre Tecnico y Profesional: ", dif_Tecnico_Profesional, "\n")
# ------------------------------- DATOS ----------------------------------------
# Primero, necesitamos cargar los datos en R. Asumamos que los datos están en dos vectores.
Winter_Nelly <- c(213.41, 185.9876, 221.9353, 320.1673, 201.3828, 180.1779, 168.4547, 222.9346, 183.4629)
Golden_Bosc <- c(170.8754, 144.3119, 166.2316, 114.3064, 112.9957, 126.6177, 117.5733, 128.7313, 143.4207, 210.4415, 138.7852, 272.3915)
# A continuación, es útil visualizar los datos. Podemos hacer esto con un boxplot.
boxplot(Winter_Nelly, Golden_Bosc, main = "Comparación de pesos", xlab = "Variedad de pera", ylab = "Peso en gramos", names = c("Winter Nelly", "Golden Bosc"))
boxplot(Winter_Nelly, Golden_Bosc,
main = "Comparación de pesos",
xlab = "Variedad de pera",
ylab = "Peso en gramos",
names = c("Winter Nelly", "Golden Bosc"))
# Puedes también examinar los datos con un histograma y un Q-Q plot para comprobar si siguen una distribución normal.
# Winter Nelly
par(mfrow=c(2, 1))
hist(Winter_Nelly, main = "Winter Nelly", xlab = "Peso en gramos")
qqnorm(Winter_Nelly); qqline(Winter_Nelly)
# Golden Bosc
par(mfrow=c(2, 1))
hist(Golden_Bosc, main = "Golden Bosc", xlab = "Peso en gramos")
qqnorm(Golden_Bosc); qqline(Golden_Bosc)
# Prueba de Shapiro-Wilk para comprobar normalidad
print(shapiro.test(Winter_Nelly))
print(shapiro.test(Golden_Bosc))
# Prueba de Levene para comprobar la igualdad de varianzas
leveneTest(Winter_Nelly, Golden_Bosc)
library(car)
# Prueba de Levene para comprobar la igualdad de varianzas
leveneTest(Winter_Nelly, Golden_Bosc)
if (!require ( car )) {
install.packages ("car" , dependencies=TRUE)
require (car)
}
# Importación de las librerias
library(car)
# Prueba de Shapiro-Wilk para comprobar normalidad
print(shapiro.test(Winter_Nelly))
print(shapiro.test(Golden_Bosc))
# Prueba de Levene para comprobar la igualdad de varianzas
leveneTest(Winter_Nelly, Golden_Bosc)
# Combinar los dos vectores en un marco de datos
pesos <- c(Winter_Nelly, Golden_Bosc)
# Crear una variable de grupo
grupo <- c(rep("Winter_Nelly", length(Winter_Nelly)), rep("Golden_Bosc", length(Golden_Bosc)))
# Crear el marco de datos
df <- data.frame(peso = pesos, variedad = grupo)
# Prueba de Levene para comprobar la igualdad de varianzas
leveneTest(peso ~ variedad, data = df)
# Si las suposiciones se mantienen, puedes realizar un test t para muestras independientes.
t.test(Winter_Nelly, Golden_Bosc, var.equal = TRUE)
# Si los datos no siguen una distribución normal o las varianzas no son iguales, puedes utilizar una prueba no paramétrica como la prueba de Mann-Whitney.
wilcox.test(Winter_Nelly, Golden_Bosc)
# Prueba de Shapiro-Wilk para comprobar normalidad
print(shapiro.test(Winter_Nelly))
print(shapiro.test(Golden_Bosc))
# Combinar los dos vectores en un marco de datos
pesos <- c(Winter_Nelly, Golden_Bosc)
# Crear una variable de grupo
grupo <- c(rep("Winter_Nelly", length(Winter_Nelly)), rep("Golden_Bosc", length(Golden_Bosc)))
# Crear el marco de datos
df <- data.frame(peso = pesos, variedad = grupo)
# Prueba de Levene para comprobar la igualdad de varianzas
leveneTest(peso ~ variedad, data = df)
# Si las suposiciones se mantienen, puedes realizar un test t para muestras independientes.
t.test(Winter_Nelly, Golden_Bosc, var.equal = TRUE)
# Si los datos no siguen una distribución normal o las varianzas no son iguales, puedes utilizar una prueba no paramétrica como la prueba de Mann-Whitney.
wilcox.test(Winter_Nelly, Golden_Bosc)
# Si los datos no siguen una distribución normal o las varianzas no son iguales, puedes utilizar una prueba no paramétrica como la prueba de Mann-Whitney.
wilcox.test(Winter_Nelly, Golden_Bosc)
# Transformar los datos utilizando logaritmo
Winter_Nelly_log <- log(Winter_Nelly)
Golden_Bosc_log <- log(Golden_Bosc)
# Graficar los datos transformados
par(mfrow = c(1, 2))
hist(Winter_Nelly_log, main = "Winter Nelly Log-Transformed", xlab = "Log-Weight")
hist(Golden_Bosc_log, main = "Golden Bosc Log-Transformed", xlab = "Log-Weight")
# Verificar la normalidad con la prueba de Shapiro-Wilk
print(shapiro.test(Winter_Nelly_log))
print(shapiro.test(Golden_Bosc_log))
# Si las suposiciones se mantienen, puedes realizar un test t para muestras independientes.
t.test(Winter_Nelly_log, Golden_Bosc_log, var.equal = TRUE)
dir <- "C:/Users/agust/Desktop/Repo IME/IME-2023/EP12"
basename <- "EP11 Datos.csv"
file <- file.path(dir, basename)
poblacion <- read.csv2(file = file)
set.seed(1234)
n <- 500
Ingresos_Media <- select(poblacion %>% filter(educ == "M. Hum. Completa"), contains("ytot"))
if (!require(boot)) {
install.packages("boot", dependencies = TRUE )
require (boot)
}
if (!require(simpleboot)) {
install.packages("simpleboot", dependencies = TRUE )
require (simpleboot)
}
set.seed(1234)
n <- 500
Ingresos_Media <- select(poblacion %>% filter(educ == "M. Hum. Completa"), contains("ytot"))
# Explortacion de las librerias
library(dplyr)
library(ggpubr)
set.seed(1234)
n <- 500
Ingresos_Media <- select(poblacion %>% filter(educ == "M. Hum. Completa"), contains("ytot"))
Ingresos_Tecnico <- select(poblacion %>% filter(educ == "Tecnico Nivel Superior Completo"), contains("ytot") )
Ingresos_Profesional <- select(poblacion %>% filter(educ == "Profesional Completo"), contains("ytot"))
#Se muestrean los ingresos según el nivel de estudios
m_Media <- sample(Ingresos_Media$ytotcorh, n)
m_Tecnico <- sample(Ingresos_Tecnico$ytotcorh, n)
m_Profesional <- sample(Ingresos_Profesional$ytotcorh, n)
# Combinamos los datos en un solo data frame
df <- data.frame(
Ingresos = c(m_Media, m_Tecnico, m_Profesional),
Educacion = factor(c(rep("Media", n), rep("Tecnico", n), rep("Profesional", n)))
)
# Hacemos la prueba de Kruskal-Wallis
kruskal_result <- kruskal.test(Ingresos ~ Educacion, data = df)
print(kruskal_result)
if (!require(FSA)) {
install.packages("FSA", dependencies = TRUE )
require (FSA)
}
# Realizamos la prueba de Dunn post-hoc después de la prueba de Kruskal-Wallis
# Esto nos indicará qué grupos específicos son diferentes entre sí
dunn_result <- dunnTest(df$Ingresos, g=df$Educacion, method="bonferroni")
# Imprimimos los resultados de la prueba de Dunn
print(dunn_result)
# Gráfico QQ para Educación Media
ggplot(df[df$Educacion == "Media",], aes(sample = Ingresos)) +
stat_qq() +
stat_qq_line() +
ggtitle("Gráfico QQ para Ingresos - Educación Media") +
theme_minimal()
# Gráfico QQ para Educación Técnica
ggplot(df[df$Educacion == "Tecnico",], aes(sample = Ingresos)) +
stat_qq() +
stat_qq_line() +
ggtitle("Gráfico QQ para Ingresos - Educación Técnica") +
theme_minimal()
# Gráfico QQ para Educación Profesional
ggplot(df[df$Educacion == "Profesional",], aes(sample = Ingresos)) +
stat_qq() +
stat_qq_line() +
ggtitle("Gráfico QQ para Ingresos - Educación Profesional") +
theme_minimal()
shapiro_test_Media <- shapiro.test(m_Media)
shapiro_test_Tecnico <- shapiro.test(m_Tecnico)
shapiro_test_Profesional <- shapiro.test(m_Profesional)
# Imprimir los resultados de las pruebas de Shapiro-Wilk
print(paste("Test de Shapiro-Wilk para Educación Media: p-value =", shapiro_test_Media$p.value))
print(paste("Test de Shapiro-Wilk para Educación Técnica: p-value =", shapiro_test_Tecnico$p.value))
print(paste("Test de Shapiro-Wilk para Educación Profesional: p-value =", shapiro_test_Profesional$p.value))
# Primero, debemos asegurarnos de que tengamos los paquetes necesarios.
# Si no los tienes instalados, puedes usar install.packages("nombre_del_paquete")
# Para este ejemplo, utilizaremos el conjunto de datos mtcars que viene incorporado en R.
# Este conjunto de datos contiene información sobre diferentes modelos de automóviles.
# Cargamos los datos
data(mtcars)
# Echamos un vistazo a los datos
head(mtcars)
# Vamos a ajustar un modelo lineal simple utilizando la función lm()
# Predeciremos el consumo de millas por galón (mpg) en función de la potencia del motor (hp)
modelo <- lm(mpg ~ hp, data = mtcars)
# Imprimimos un resumen del modelo
summary(modelo)
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
library(ggpubr)
library(dplyr)
library(tidyr)
setwd("C:/Users/agust/Desktop/Repo IME/IME-2023/EP13")
data <- read.csv2("EP13 Datos.csv")
data[["id"]] <- factor(1:nrow(data))
set.seed(2184)
muestra <- sample_n(data, 100)
# Se extraen de forma aleatoria las variables para la prueba
opciones <-  c("clase", "acidez.fija", "acidez.volatil", "acido.citrico",
"azucar.residual", "cloruros", "dioxido.azufre.libre", "dioxido.azufre.total",
"densidad", "ph", "sulfatos", "alcohol")
variables <- sample(opciones, 6)
print(variables)
calidad <- muestra[["calidad"]]
# Se analiza la correlación existente entre las variables no seleccionadas
densidad <- muestra[["densidad"]]
acidesFija <- muestra[["acidez.fija"]]
acidoCitrico <- muestra[["acido.citrico"]]
cloruros <- muestra[["cloruros"]]
dioxidoAzufreLibre <- muestra[["dioxido.azufre.libre"]]
dioxidoAzufreTotal <- muestra[["dioxido.azufre.total"]]
correlacion_lineal <- cor(densidad, calidad)
cat("Densidad: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidesFija, calidad)
cat("Acides fija: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidoCitrico, calidad)
cat("Acido citrico: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(cloruros, calidad)
cat("Cloruros: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreLibre, calidad)
cat("dioxido azufre libre: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreTotal, calidad)
cat("dioxido azufre total: ", correlacion_lineal, "\n")
# Se verifica que los datos cumplan con las condiciones para desarrollar RML de mínimos cuadrados
muestras <- data.frame(calidad, densidad)
modelo <- lm(calidad~densidad, data = muestras)
print(summary(modelo))
p <- ggscatter(muestras, x = "densidad", y = "calidad", color = "blue", fill = "blue",
xlab = "Densidad total [g/L]", ylab = "Calidad del vino")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
print(shapiro.test(modelo$residuals))
# Se agrega la variable 'calidad' al conjunto obtenido en el paso 3
variables <- c(variables, "calidad")
# print(variables)
# Creamos la formula para el modelo. Esta formula representa 'calidad ~ predictor1 + predictor2 + ... + predictorN'
f <- as.formula(paste("calidad", paste(variables, collapse = " + "), sep = " ~ "))
print(f)
# Creamos un modelo de regresión lineal con todas las variables predictoras
modelo_completo <- lm(f, data = muestra)
variables2 <-  c("densidad", "acidez.fija", "acido.citrico", "cloruros",
"dioxido.azufre.libre", "dioxido.azufre.total")
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# |||||||||||||||||||||||||||||||| RESPUESTAS ||||||||||||||||||||||||||||||||
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
library(ggpubr)
library(dplyr)
library(tidyr)
setwd("C:/Users/agust/Desktop/Repo IME/IME-2023/EP13")
data <- read.csv2("EP13 Datos.csv")
data[["id"]] <- factor(1:nrow(data))
set.seed(2184)
muestra <- sample_n(data, 100)
# Se extraen de forma aleatoria las variables para la prueba
opciones <-  c("clase", "acidez.fija", "acidez.volatil", "acido.citrico",
"azucar.residual", "cloruros", "dioxido.azufre.libre", "dioxido.azufre.total",
"densidad", "ph", "sulfatos", "alcohol")
variables <- sample(opciones, 6)
print(variables)
calidad <- muestra[["calidad"]]
# Se analiza la correlación existente entre las variables no seleccionadas
densidad <- muestra[["densidad"]]
acidesFija <- muestra[["acidez.fija"]]
acidoCitrico <- muestra[["acido.citrico"]]
cloruros <- muestra[["cloruros"]]
dioxidoAzufreLibre <- muestra[["dioxido.azufre.libre"]]
dioxidoAzufreTotal <- muestra[["dioxido.azufre.total"]]
correlacion_lineal <- cor(densidad, calidad)
cat("Densidad: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidesFija, calidad)
cat("Acides fija: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidoCitrico, calidad)
cat("Acido citrico: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(cloruros, calidad)
cat("Cloruros: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreLibre, calidad)
cat("dioxido azufre libre: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreTotal, calidad)
cat("dioxido azufre total: ", correlacion_lineal, "\n")
# Se realiza el RML mediante mínimos cuadrados, utilizando la variable "densidad" y "calidad",
# se escoje a variable densidad dado a que es la que posee la correlación mas fuerte con la
# variable "calidad", además, es una característica propia para medir la calidad de los vinos
# Cabe destacar que la correlación que existe entre las variables "densidad" y "calidad" es
# muy baja, siento ésta de -0.3173, por lo que desde un comienzo se sabe que la fuerza de relación
# lineal que existe es baja
# Se verifica que los datos cumplan con las condiciones para desarrollar RML de mínimos cuadrados
muestras <- data.frame(calidad, densidad)
modelo <- lm(calidad~densidad, data = muestras)
print(summary(modelo))
variables2 <-  c("densidad", "acidez.fija", "acido.citrico", "cloruros",
"dioxido.azufre.libre", "dioxido.azufre.total")
p <- ggscatter(muestras, x = "densidad", y = "calidad", color = "blue", fill = "blue",
xlab = "Densidad total [g/L]", ylab = "Calidad del vino")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
print(shapiro.test(modelo$residuals))
# Creamos la formula para el modelo. Esta formula representa 'calidad ~ predictor1 + predictor2 + ... + predictorN'
f <- as.formula(paste("calidad", paste(variables2, collapse = " + "), sep = " ~ "))
print(f)
# Creamos un modelo de regresión lineal con todas las variables predictoras
modelo_completo <- lm(f, data = muestra)
# Selección de predictores hacia adelante (forward)
# Comenzamos con el modelo simple (modelo) y nos movemos hacia el modelo completo
modelo_forward = step(modelo, scope = list(lower = modelo, upper = modelo_completo), direction = "forward", trace = 1)
# Selección de predictores hacia adelante (forward)
# Comenzamos con el modelo simple (modelo) y nos movemos hacia el modelo completo
modelo_forward = step(modelo, scope = list(lower = modelo, upper = modelo_completo), direction = "forward", trace = 1)
cruzada).
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# |||||||||||||||||||||||||||||||| RESPUESTAS ||||||||||||||||||||||||||||||||
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
library(ggpubr)
library(dplyr)
library(tidyr)
setwd("C:/Users/agust/Desktop/Repo IME/IME-2023/EP13")
data <- read.csv2("EP13 Datos.csv")
data[["id"]] <- factor(1:nrow(data))
set.seed(2184)
muestra <- sample_n(data, 100)
# Se extraen de forma aleatoria las variables para la prueba
opciones <-  c("clase", "acidez.fija", "acidez.volatil", "acido.citrico",
"azucar.residual", "cloruros", "dioxido.azufre.libre", "dioxido.azufre.total",
"densidad", "ph", "sulfatos", "alcohol")
variables <- sample(opciones, 6)
print(variables)
calidad <- muestra[["calidad"]]
# Se analiza la correlación existente entre las variables no seleccionadas
densidad <- muestra[["densidad"]]
acidesFija <- muestra[["acidez.fija"]]
acidoCitrico <- muestra[["acido.citrico"]]
cloruros <- muestra[["cloruros"]]
dioxidoAzufreLibre <- muestra[["dioxido.azufre.libre"]]
dioxidoAzufreTotal <- muestra[["dioxido.azufre.total"]]
correlacion_lineal <- cor(densidad, calidad)
cat("Densidad: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidesFija, calidad)
cat("Acides fija: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidoCitrico, calidad)
cat("Acido citrico: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(cloruros, calidad)
cat("Cloruros: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreLibre, calidad)
cat("dioxido azufre libre: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreTotal, calidad)
cat("dioxido azufre total: ", correlacion_lineal, "\n")
# Se realiza el RML mediante mínimos cuadrados, utilizando la variable "densidad" y "calidad",
# se escoje a variable densidad dado a que es la que posee la correlación mas fuerte con la
# variable "calidad", además, es una característica propia para medir la calidad de los vinos
# Cabe destacar que la correlación que existe entre las variables "densidad" y "calidad" es
# muy baja, siento ésta de -0.3173, por lo que desde un comienzo se sabe que la fuerza de relación
# lineal que existe es baja
# Se verifica que los datos cumplan con las condiciones para desarrollar RML de mínimos cuadrados
muestras <- data.frame(calidad, densidad)
modelo <- lm(calidad~densidad, data = muestras)
print(summary(modelo))
variables2 <-  c("densidad", "acidez.fija", "acido.citrico", "cloruros",
"dioxido.azufre.libre", "dioxido.azufre.total")
p <- ggscatter(muestras, x = "densidad", y = "calidad", color = "blue", fill = "blue",
xlab = "Densidad total [g/L]", ylab = "Calidad del vino")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
print(shapiro.test(modelo$residuals))
# Creamos la formula para el modelo. Esta formula representa 'calidad ~ predictor1 + predictor2 + ... + predictorN'
f <- as.formula(paste("Weight", paste(c("densidad", predictoras), collapse = "+"), sep = " ~ "))
# Creamos la formula para el modelo. Esta formula representa 'calidad ~ predictor1 + predictor2 + ... + predictorN'
f <- as.formula(paste("Weight", paste(c("densidad", variables2), collapse = "+"), sep = " ~ "))
print(f)
# Creamos un modelo de regresión lineal con todas las variables predictoras
modelo_completo <- lm(f, data = muestra)
cruzada).
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
# |||||||||||||||||||||||||||||||| RESPUESTAS ||||||||||||||||||||||||||||||||
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
library(ggpubr)
library(dplyr)
library(tidyr)
setwd("C:/Users/agust/Desktop/Repo IME/IME-2023/EP13")
data <- read.csv2("EP13 Datos.csv")
data[["id"]] <- factor(1:nrow(data))
set.seed(2184)
muestra <- sample_n(data, 100)
# Se extraen de forma aleatoria las variables para la prueba
opciones <-  c("clase", "acidez.fija", "acidez.volatil", "acido.citrico",
"azucar.residual", "cloruros", "dioxido.azufre.libre", "dioxido.azufre.total",
"densidad", "ph", "sulfatos", "alcohol")
variables <- sample(opciones, 6)
print(variables)
calidad <- muestra[["calidad"]]
# Se analiza la correlación existente entre las variables no seleccionadas
densidad <- muestra[["densidad"]]
acidesFija <- muestra[["acidez.fija"]]
acidoCitrico <- muestra[["acido.citrico"]]
cloruros <- muestra[["cloruros"]]
dioxidoAzufreLibre <- muestra[["dioxido.azufre.libre"]]
dioxidoAzufreTotal <- muestra[["dioxido.azufre.total"]]
correlacion_lineal <- cor(densidad, calidad)
cat("Densidad: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidesFija, calidad)
cat("Acides fija: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(acidoCitrico, calidad)
cat("Acido citrico: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(cloruros, calidad)
cat("Cloruros: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreLibre, calidad)
cat("dioxido azufre libre: ", correlacion_lineal, "\n")
correlacion_lineal <- cor(dioxidoAzufreTotal, calidad)
cat("dioxido azufre total: ", correlacion_lineal, "\n")
muestras <- data.frame(calidad, densidad)
modelo <- lm(calidad~densidad, data = muestras)
print(summary(modelo))
variables2 <-  c("densidad", "acidez.fija", "acido.citrico", "cloruros",
"dioxido.azufre.libre", "dioxido.azufre.total")
p <- ggscatter(muestras, x = "densidad", y = "calidad", color = "blue", fill = "blue",
xlab = "Densidad total [g/L]", ylab = "Calidad del vino")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
print(shapiro.test(modelo$residuals))
# Creamos la formula para el modelo. Esta formula representa 'calidad ~ predictor1 + predictor2 + ... + predictorN'
f <- as.formula(paste("calidad", paste(c("densidad", variables2), collapse = "+"), sep = " ~ "))
print(f)
# Creamos un modelo de regresión lineal con todas las variables predictoras
modelo_completo <- lm(f, data = muestra)
# Selección de predictores hacia adelante (forward)
# Comenzamos con el modelo simple (modelo) y nos movemos hacia el modelo completo
modelo_forward = step(modelo, scope = list(lower = modelo, upper = modelo_completo), direction = "forward", trace = 1)
# Selección de predictores hacia adelante (forward)
# Comenzamos con el modelo simple (modelo) y nos movemos hacia el modelo completo
modelo_nulo = lm(calidad ~ 1, data = muestra)
modelo_forward = step(modelo_nulo, scope = list(lower = modelo_nulo, upper = modelo_completo), direction = "forward", trace = 1)
# Resumen del modelo propuesto por el método Forward
summary(modelo_forward)
# Selección de predictores hacia atrás (backward)
# Comenzamos con el modelo completo y nos movemos hacia el modelo simple
modelo_backward = step(modelo_completo, scope = list(lower = modelo, upper = modelo_completo), direction = "backward", trace = 1)
# Resumen del modelo propuesto por el método Backward
summary(modelo_backward)
varianzas_densidad <- var(muestras$densidad)
varianzas_dioxido.azufre.libre <- var(muestras$dioxidoAzufreLibre)
print(varianzas_densidad)
print(varianzas_dioxido.azufre.libre)
varianzas_acido.citrico <- var(muestras$acidoCitrico)
varianzas_densidad <- var(muestras$densidad)
varianzas_dioxido.azufre.libre <- var(muestras$dioxido.azufre.libre)
varianzas_dioxido.azufre.libre <- var(muestras$dioxido.azufre.libre)
varianzas_acido.citrico <- var(muestras$acido.citrico)
varianzas_dioxido.azufre.libre <- var(muestras$cloruros)
View(muestra)
varianzas_densidad <- var(muestra$densidad)
print(varianzas_densidad)
varianzas_dioxido.azufre.libre <- var(muestra$dioxido.azufre.libre)
print(varianzas_dioxido.azufre.libre)
varianzas_acido.citrico <- var(muestra$acido.citrico)
print(varianzas_acido.citrico)
vifs <- vif(modelo_forward)
# Librerías
if (!require(readxl) ) {
install.packages("readxl", dependencies = TRUE )
require (readxl)
}
if (!require(ggpubr) ) {
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(dplyr) ) {
install.packages("dplyr", dependencies = TRUE )
require (dplyr)
}
if (!require(car)){
install.packages("car", dependencies = TRUE )
require (car)
}
if (!require(corrplot)){
install.packages("corrplot", dependencies = TRUE )
require (corrplot)
}
vifs <- vif(modelo_forward)
cat("\nVerificar la multicolinealidad :\n")
cat("- VIFs :\n")
print( vifs )
cat("- Tolerancias :\n")
print(1/vifs)
cat("- VIF medio :", mean (vifs), "\n")
prueba.Ncv <- ncvTest(modelo_forward)
print(prueba.Ncv)
prueba.shapiro = shapiro.test(modelo_forward$residuals)
print(prueba.shapiro)
prueba.durbin <- durbinWatsonTest(models.forward)
prueba.durbin <- durbinWatsonTest(modelo_forward)
print(prueba.durbin)
datos_PR <- select(muestra, densidad, dioxido.azufre.libre, acido.citrico)
correlacion <- round(cor(datos_PR), 2)
correlacion
corrplot(correlacion, method="number", type="upper")
datos_PR <- select(muestra, densidad, dioxido.azufre.libre, acido.citrico)
datos_PR$log_densidad <- log(datos_PR$densidad)
correlacion <- round(cor(datos_PR), 2)
correlacion
corrplot(correlacion, method="number", type="upper")
plot(datos_PR$log_densidad, modelo_forward$residuals,
xlab = "Logaritmo de la densidad",
ylab = "Residuos del modelo",
main = "Gráfico de dispersión entre logaritmo de la densidad y los residuos del modelo")
datos_PR <- select(muestra, densidad, dioxido.azufre.libre, acido.citrico)
datos_PR$log_densidad <- log(datos_PR$densidad)
correlacion <- round(cor(datos_PR$log_densidad), 2)
plot(datos_PR, modelo_forward$residuals,
xlab = "Logaritmo de la densidad",
ylab = "Residuos del modelo",
main = "Gráfico de dispersión entre logaritmo de la densidad y los residuos del modelo")
# Crear conjuntos de entrenamiento y prueba .
n <- nrow(muestra)
n_entrenamiento <- floor(0.7 * n)
muestra_sample <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
entrenamiento <- muestra[muestra_sample, ]
prueba <- muestra[-muestra_sample, ]
# Ajustar modelo con el conjunto de entrenamiento.
modelo_model <- lm(calidad ~ densidad, data = entrenamiento)
print(summary(modelo))
# Calcular error cuadrado promedio para el conjunto de entrenamiento.
mse_entrenamiento <- mean (modelo_model$residuals ** 2)
cat("MSE para el conjunto de entrenamiento: ", mse_entrenamiento, "\n")
# Hacer predicciones para el conjunto de prueba.
predicciones <- predict(modelo_model, prueba)
# Calcular error cuadrado promedio para el conjunto de prueba.
error <- sapply(prueba[["Weight"]],as.double) - predicciones
error <- sapply(prueba[["calidad"]],as.double) - predicciones
mse_prueba <- mean(error ** 2)
cat("MSE para el conjunto de prueba: ", mse_prueba)
cat("MSE para el conjunto de prueba: ", mse_prueba)
